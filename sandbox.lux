--[[
	This function comes from a stackoverflow answer by islet8.
		Slightly modified to actually work.
	https://stackoverflow.com/a/16077650
	https://creativecommons.org/licenses/by-sa/3.0/
--]]
---@param o table
---@param seen table?
---@return table
local deepcopy
deepcopy = function(o, seen)
	seen = seen or {}
	if o == nil then return nil end
	if seen[o] then return seen[o] end

	local no
	if type(o) == 'table' then
	no = {}
	seen[o] = no

	for k, v in next, o, nil do
		no[deepcopy(k, seen)] = deepcopy(v, seen)
	end
	setmetatable(no, deepcopy(getmetatable(o), seen))
	else -- number, string, boolean, etc
	no = o
	end
	return no
end


--- Complete unsafe copy of the base environment.
initial_environment = {
	_VERSION = _VERSION,
	assert = assert,
	collectgarbage = collectgarbage,
	dofile = dofile,
	error = error,
	getmetatable = getmetatable,
	ipairs = ipairs,
	load = load,
	loadfile = loadfile,
	loadstring = loadstring,
	next = next,
	pairs = pairs,
	pcall = pcall,
	print = print,
	rawequal = rawequal,
	rawlen = rawlen,
	rawset = rawset,
	rawget = rawget,
	require = require,
	select = select,
	setmetatable = setmetatable,
	tonumber = tonumber,
	tostring = tostring,
	type = type,
	warn = warn,
	xpcall = xpcall,
	unpack = unpack,
	getfenv = getfenv,
	setfenv = setfenv,
	utf8 = deepcopy(utf8),
	coroutine = deepcopy(coroutine),
	debug = deepcopy(debug),
	io = deepcopy(io),
	math = deepcopy(math),
	os = deepcopy(os),
	string = deepcopy(string),
	package = deepcopy(package),
	table = deepcopy(table),
}

---@class set
set_mt = {}
set_mt.__index = set_mt
function set_mt:add(...)
	for _, element in ipairs({...}) do
		self[element] = true
	end
end
function set_mt:remove(...)
	for _, element in ipairs({...}) do
		self[element] = nil
	end
end
function set_mt:removeall()
	for key in pairs(self) do
		self[key] = nil
	end
end
function set_mt:add_from_table(tab, prefix)
	prefix = prefix or ""
	for key, val in pairs(tab) do
		if type(val) == "table" and prefix == "" then
			self:add_from_table(val, key..".")
		else
		self[prefix..key] = true
		end
	end
end
---@return set
function new_set()
	return setmetatable({}, set_mt)
end


---@class sandboxTemplate
---@field inherits? sandboxTemplate
---@field keeps set
---@field sets table
---@field special? function
template_mt = {}
template_mt.__index = template_mt

---@return sandboxEnv env The finished, usable sandbox table.
function template_mt:create_env()
	local environment = {}
	if self.inherits then
		old_environment = self.inherits:create_env()
		for key in pairs(self.keeps) do
			local module, method = key:match('([^%.]+)%.([^%.]+)')
			if module and old_environment[module] then
				environment[module] = environment[module] or {}
				environment[module][method] = old_environment[module][method]
			else
				environment[key] = old_environment[key]
			end
			-- if not self.keeps[key] then
			-- 	environment[key] = nil
			-- end
		end
		old_environment = nil
	-- else
	-- 	environment = {}
	end
	for key, value in pairs(self.sets) do
		environment[deepcopy(key)] = deepcopy(value)
	end
	if self.special then
		self.special(environment)
	end
	return environment
end

local sandboxes = {}


function sandboxes.clone(original)
	new = {}
	new.__is_sandbox_template = true
	new.keeps = new_set()
	new.sets = {}
	new.inherits = original.inherits
	for key in pairs(original.keeps) do
		new.keeps:add(key)
	end
	for key, value in pairs(original.sets) do
		new.sets[key] = value
	end
	new.special = original.special
	new._G = new
	setmetatable(new, template_mt)
	return new
end

---@param inherits sandboxTemplate? The template to inherit from, if any.
---@return sandboxTemplate
function sandboxes.new(inherits, inherit_keeps)
	new_template = {}
	new_template.__is_sandbox_template = true
	new_template.keeps = new_set()
	new_template.sets = {}
	if inherits then
		if inherits.__is_sandbox_template then
			new_template.inherits = inherits
			if inherit_keeps then
				for key in pairs(inherits.keeps) do
					new_template.keeps:add(key)
				end
			end
		else
			error("attempted to inherit from invalid parent", 2)
		end
	end
	new_template._G = new_template
	setmetatable(new_template, template_mt)
	return new_template
end

sandboxes.unsafe = sandboxes.new()
sandboxes.unsafe.sets = initial_environment
-- sandboxes.unsafe.special = (self) -> (self._G = self)


sandboxes.restricted = sandboxes.new(sandboxes.unsafe)
sandboxes.restricted.keeps:add( "_VERSION", "assert", "error", "ipairs", "next",
								"pairs", "pcall", "print", "select", "tonumber", "tostring", "type",
								"warn", "xpcall", "unpack", 
								"utf8.char", "utf8.charpattern", "utf8.codes", "utf8.codepoint",
								"utf8.len", "utf8.offset",  
								"math.abs", "math.acos", "math.asin", "math.atan", "math.atan2",
								"math.ceil", "math.floor", "math.cos", "math.cosh", "math.deg", 
								"math.exp", "math.fmod", "math.frexp", "math.huge", "math.ldexp",
								"math.log", "math.log10", "math.max", "math.min", "math.modf", "math.pi",
								"math.pow", "math.rad", "math.random", "math.sin", "math.sinh", 
								"math.sqrt", "math.tan", "math.tanh",
								"string.lower", "string.upper", "string.find",
								"string.match", "string.gmatch", "string.gsub", "string.format",
								"string.len", "string.byte", "string.char", "string.sub", 
								"string.reverse",
								"coroutine.status", "coroutine.running", "coroutine.isyieldable",
								"coroutine.create", "coroutine.yield", "coroutine.resume", 
								"coroutine.wrap",
								"os.clock", "os.difftime", "os.time",
								"table.insert", "table.maxn", "table.remove", "table.sort"
)


function sandboxes._check_file_exists(filename)
	local file = io.open(filename)
	if file then
		file:close()
		return true
	end
	return false
end

sandboxes._default_require_path = package.path

-- Based partially on code from Candran
-- Thanks for having an implementation to reference
-- https://github.com/Reuh/candran
local function filepath_search(filepath)
	for path in package.path:gmatch("[^;]+") do
		local fixed_path = path:gsub("%?", (filepath:gsub("%.", "/")))
		-- local file = open(fixed_path)
		-- if file then
		-- 	file:close()
		-- 	return fixed_path
		-- end
		-- print("fpath", filepath)
		if sandboxes._check_file_exists(fixed_path) then
			return fixed_path
		end
	end
end

local function return_lua_searcher(env)
	local searcher = function(modulepath)
		local filepath = filepath_search(modulepath)
		if filepath then
			return function(reqpath)
				local chunk, err = env.loadfile(filepath, "t", env)
				if chunk then
					return chunk, reqpath
				else
					error("error loading module '" .. reqpath .. "'\n" .. (err or ""), 0)
				end
			end
		else
			local err = ("\n\tno file '%s.lua' in package.path"):format(modulepath, 2)
			return err
		end
	end
	return searcher
end


local function create_require(env)
	env.package = env.package or {}
	env.package.searchers = { return_lua_searcher(env) }
	env.package.preload = {}
	env.package.loaded = {}
	env.package.path = sandboxes._default_require_path

	env.require = function(modname)
		if env.package.loaded[modname] then
			return env.package.loaded[modname]
		end

		local loader
		local errors = {}
		if env.package.preload[modname] then
			loader = env.package.preload[modname]
		else
			for _,searcher in ipairs(env.package.searchers) do
				local result = searcher(modname)
				if type(result) == "function" then
					loader = result
					break
				else
					table.insert(errors, result)
				end
			end
		end
		if loader == nil then
			error(table.concat(errors))
		else
			local status, res = pcall(loader, modname)
			if status == false or type(res) ~= "function" then
				error(res, 2)
			end

			local chunk = res
			status, res = pcall(chunk, modname)
			if status == false then
				error("error loading module '" .. modname .. "'\n" .. res, 2)
			end
			if res == nil then
				res = true
			end
			env.package.loaded[modname] = res
			return res
		end
	end
end

local string_metatable = getmetatable("")

sandboxes.protected = sandboxes.clone(sandboxes.restricted)
sandboxes.protected.keeps:add("setmetatable", "rawset", "rawget", "rawlen", "rawequal", "string.dump", 
							  "string.rep", "collectgarbage")
sandboxes.protected.sets.getmetatable = function(obj)
	if type(obj) == "table" then
		return getmetatable(obj)
	else
		error("attempt to get dangerous metatable from inside sandbox", 2)
	end
end
sandboxes.protected.special = function(sbox)
	if _VERSION == "Lua 5.1" then
		sbox.load = function(a, b)
			chunk, err = load(a, b)
			if chunk then setfenv(chunk, sbox) end
			return chunk, err
		end
		sbox.loadfile = function(a)
			chunk, err = loadfile(a)
			if chunk then setfenv(chunk, sbox) end
			return chunk, err
		end
		sbox.loadstring = function(a)
			chunk, err = loadstring(a)
			if chunk then setfenv(chunk, sbox) end
			return chunk, err
		end
	else -- 5.2 and above
		sbox.load = function(a, b, c, env)
			if env == nil then
				env = sbox
			end
			return load(a, b, c, env)
		end
		sbox.loadfile = function(a, b, env)
			if env == nil then
				env = sbox
			end
			return loadfile(a, b, env)
		end
		sbox.loadstring = function(string, env)
			if env == nil then
				env = sbox
			end
			return load(string, nil, "t", env)
		end
	end

	-- shared between both...
	sbox.dofile = function(a)
		chunk, err = sbox.loadfile(a)
		if err then error(err, 2) end
		return chunk()
	end
	create_require(sbox)
end

return sandboxes